// 병합 정렬 알고리즘 구현
// 두 개의 정렬된 배열을 병합하는 함수
함수 병합(왼쪽, 오른쪽) {
    변수 결과 = [];
    변수 i = 0;
    변수 j = 0;
    
    // 두 배열의 요소를 비교하여 작은 것부터 결과 배열에 붙이기
    조건반복 (i < 왼쪽.길이 and j < 오른쪽.길이) {
        만약 (왼쪽[i] <= 오른쪽[j]) {
            결과.붙이기(왼쪽[i]);
            i = i + 1;
        } else {
            결과.붙이기(오른쪽[j]);
            j = j + 1;
        }
    }
    
    // 남은 요소들을 결과 배열에 붙이기
    조건반복 (i < 왼쪽.길이) {
        결과.붙이기(왼쪽[i]);
        i = i + 1;
    }
    
    조건반복 (j < 오른쪽.길이) {
        결과.붙이기(오른쪽[j]);
        j = j + 1;
    }
    
    반환 결과;
}

// 배열 복사 함수
함수 배열복사(배열) {
    변수 복사 = [];
    범위반복(변수 i = 0; i < 배열.길이; i = i + 1) {
        복사.붙이기(배열[i]);
    }
    반환 복사;
}

// 병합 정렬 메인 함수
함수 병합정렬(배열) {
    // 기본 케이스: 배열의 길이가 1 이하면 이미 정렬된 상태
    만약 (배열.길이 <= 1) {
        반환 배열복사(배열);
    }
    
    // 배열을 두 부분으로 나누기
    변수 중간 = 배열.길이 / 2;
    // 부동소수점 오차 방지를 위해 정수로 변환
    중간 = 중간 - 중간 % 1;
    변수 왼쪽 = [];
    변수 오른쪽 = [];
    
    // 왼쪽 부분 복사
    범위반복(변수 i = 0; i < 중간; i = i + 1) {
        왼쪽.붙이기(배열[i]);
    }
    
    // 오른쪽 부분 복사
    범위반복(변수 i = 중간; i < 배열.길이; i = i + 1) {
        오른쪽.붙이기(배열[i]);
    }
    
    // 재귀적으로 정렬
    변수 정렬된왼쪽 = 병합정렬(왼쪽);
    변수 정렬된오른쪽 = 병합정렬(오른쪽);
    
    // 정렬된 두 부분을 병합
    반환 병합(정렬된왼쪽, 정렬된오른쪽);
}

// 성능 테스트 함수 : 10만개 정렬 1.4초
함수 성능테스트() {
    출력 "=== 병합 정렬 성능 테스트 ===";
    출력 "\n";

    // 큰 배열 생성 (100000개 요소)
    변수 큰배열 = [];
    범위반복 (변수 i = 0; i < 100000; i = i + 1) {
        변수 값 = 100000 - i;
        // 부동소수점 오차 방지를 위해 정수로 변환
        값 = 값 - 값 % 1;
        큰배열.붙이기(값); // 역순으로 생성
    }
    
    출력 "배열 길이: ";
    출력 큰배열.길이;
    출력 "\n";
    
    출력 "원본 배열 첫 20개: ";
    범위반복 (변수 i = 0; i < 20; i = i + 1) {
        출력 큰배열[i];
        만약 (i < 19) {
            출력 ", ";
        }
    }
    출력 "\n";
    
    출력 "원본 배열 마지막 20개: ";
    범위반복 (변수 i = 99980; i < 100000; i = i + 1) {
        출력 큰배열[i];
        만약 (i < 99999) {
            출력 ", ";
        }
    }
    출력 "\n";
    
    출력 "100000개 요소 배열 정렬 시작...";
    출력 "\n";

    변수 시작시간 = clock();
    변수 정렬된배열 = 병합정렬(큰배열);
    변수 종료시간 = clock();
    변수 소요시간 = 종료시간 - 시작시간;
    
    출력 "정렬 완료! 소요 시간: ";
    출력 소요시간;
    출력 "초";
    출력 "\n";
    
    출력 "정렬된 배열 길이: ";
    출력 정렬된배열.길이;
    출력 "\n";
    
    출력 "첫 20개 요소: ";
    범위반복 (변수 i = 0; i < 20; i = i + 1) {
        출력 정렬된배열[i];
        만약 (i < 19) {
            출력 ", ";
        }
    }
    출력 "\n";
    
    출력 "마지막 20개 요소: ";
    범위반복 (변수 i = 980; i < 1000; i = i + 1) {
        출력 정렬된배열[i];
        만약 (i < 999) {
            출력 ", ";
        }
    }
    출력 "\n";
    
}

// 메인 실행
성능테스트();
